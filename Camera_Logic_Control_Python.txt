using System;
using System.Collections.Generic;
using System.Threading;
using EDSDKLib;
using System.Linq;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.IO;
using Finisar.SQLite;

namespace ConsoleExample
{
    class Program
    {
        static SDKHandler CameraHandler;
        static bool WaitForEvent;
        int i = 1; 
        static void Main(string[] args)
        {

            //OPEN CONNECTION WITH DATABASE 
            SQLiteConnection sqlite_conn; //instantiate object as reference
            SQLiteCommand sqlite_cmd; //instantiate object as reference
            SQLiteDataReader sqlite_datareader;//instantiate object as reference
            int StartPhotos = 0; //declare integer to count number of photos taken
            int myinstruction_last = 0;

            int myreader_last = 0; //keep track of last index 
            List<string> instruction = new List<string>();

            // create a new database connection:
            sqlite_conn = new SQLiteConnection("Data Source= ProjectSample.db;Version=3;");

            // open the connection:
            sqlite_conn.Open();
            Console.WriteLine("Connection has been established");

            sqlite_cmd = sqlite_conn.CreateCommand();

            // Now lets execute the SQL ;D
            sqlite_cmd.ExecuteNonQuery();

            // create a new SQL command:
            sqlite_cmd = sqlite_conn.CreateCommand();

            try
            {
                CameraHandler = new SDKHandler();
                CameraHandler.SDKObjectEvent += handler_SDKObjectEvent;
                List<Camera> cameras = CameraHandler.GetCameraList();
                if (cameras.Count > 0)
                {
                    CameraHandler.OpenSession(cameras[0]);
                    Console.WriteLine("Opened session with camera: " + cameras[0].Info.szDeviceDescription);
                }
                else
                {
                    Console.WriteLine("No camera found. Please plug in camera");
                    CameraHandler.CameraAdded += handler_CameraAdded;
                    CallEvent();
                   // CameraHandler.ImageSaveDirectory = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyPictures), "RemotePhoto");
                    // CameraHandler.SetSetting(EDSDK.PropID_SaveTo, (uint)EDSDK.EdsSaveTo.Host);
                }

                while (true)
                {
                    //GRAB THE LAST ID IN THE TABLE 
                    sqlite_cmd.CommandText = "select id from Communication order by id desc limit 1";

                    // CONVERT THE ID TO AN INT
                    Int64 LastRowID64 = (Int64)sqlite_cmd.ExecuteScalar();
                    int LastRowID = (int)LastRowID64;

                    //PRINT OUT ID 
                    Console.WriteLine("Index is:" + LastRowID);
                    

                    //GRAB THE LAST INSTRUCTION IN THE TABLE 
                    sqlite_cmd.CommandText = "select Camera from Communication order by id desc limit 1";
                    Int64 LastRowInDx64 = (Int64)sqlite_cmd.ExecuteScalar();
                    int LastRowInDx = (int)LastRowInDx64;
                    Console.WriteLine("Camera Instruction is: " + LastRowInDx);

                    // Now the SQLiteCommand object can give us a DataReader-Object:
                    sqlite_datareader = sqlite_cmd.ExecuteReader();


                    if (LastRowInDx == myinstruction_last)
                    {

                        CallEvent();
                        Console.WriteLine("Same row as last time!");
                    }
                    else {

                    //if (LastRowInDx == (myreader_last + 1))
                    //{
                        if (LastRowInDx == 1) // If it is READY then proceed with this loop 
                        {
                            do
                            {
                                for (StartPhotos = 0; StartPhotos < 5; StartPhotos++) //Iteration loop 
                                {
                                    Console.WriteLine("Taking photo with current settings..."); //Print that the caemera is taking photos 
                                    CameraHandler.SetCapacity();
                                    CameraHandler.TakePhoto();
                                    Thread.Sleep(2000);
                                }
                            } while (StartPhotos < 5);

                            Console.WriteLine("Photo taken and saved");
                            myinstruction_last = LastRowInDx;

                        }
                        else if (LastRowInDx == 0)
                        {

                            CallEvent();
                            Console.WriteLine("Buggy's on the move");
                            myinstruction_last = LastRowInDx;
                        }

                        else if (LastRowInDx == 2)
                        {

                            CallEvent();
                            sqlite_conn.Close();
                            Console.WriteLine("That's the end of the program");
                            myinstruction_last = LastRowInDx;
                        }

                        else
                        {
                            CallEvent();
                            Console.WriteLine("Nothing needs to happen here");
                        }

                        Console.WriteLine("My reader last:" + myreader_last);
                       // myreader_last++;
                       
                        sqlite_datareader.Dispose();
                        Thread.Sleep(100);
                    }   
                }
            }
            catch (Exception ex) { Console.WriteLine("Error: " + ex.Message); }
            finally
            {
                CameraHandler.CloseSession();
                CameraHandler.Dispose();
                Console.WriteLine("Good bye! (press any key to close)");
                Console.ReadKey();
            }
        }

        static void CallEvent()
        {
            WaitForEvent = true;
            while (WaitForEvent)
            {
                EDSDK.EdsGetEvent();
                Thread.Sleep(200);
                WaitForEvent = false;
            }
        }

        static uint handler_SDKObjectEvent(uint inEvent, IntPtr inRef, IntPtr inContext)

        {
            if (inEvent == EDSDK.ObjectEvent_DirItemRequestTransfer || inEvent == EDSDK.ObjectEvent_DirItemCreated) WaitForEvent = false;
            return EDSDK.EDS_ERR_OK;
        }

        static void handler_CameraAdded()
        {
            List<Camera> cameras = CameraHandler.GetCameraList();
            if (cameras.Count > 0) CameraHandler.OpenSession(cameras[0]);
            Console.WriteLine("Opened session with camera: " + cameras[0].Info.szDeviceDescription);
            WaitForEvent = false;
        }
    }
}


